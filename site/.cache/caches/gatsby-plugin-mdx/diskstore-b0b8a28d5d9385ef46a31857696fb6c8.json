{"expireTime":9007200845339907000,"key":"gatsby-plugin-mdx-entire-payload-e857458052500c75999fadda677cd708-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":89,"offset":90},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":92},"end":{"line":5,"column":29,"offset":120},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Getting Started","position":{"start":{"line":7,"column":3,"offset":124},"end":{"line":7,"column":18,"offset":139},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":122},"end":{"line":7,"column":18,"offset":139},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"DFlex","position":{"start":{"line":9,"column":3,"offset":145},"end":{"line":9,"column":8,"offset":150},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":143},"end":{"line":9,"column":10,"offset":152},"indent":[]}},{"type":"text","value":" is a JavaScript ambitious project to manipulate DOM Elements. It\noffers a solution to manipulate DOM elements with API easy to use\nand implement. It doesn't reinvent the wheel instead it was built upon\nwhat we already have.","position":{"start":{"line":9,"column":10,"offset":152},"end":{"line":12,"column":22,"offset":379},"indent":[1,1,1]}}],"position":{"start":{"line":9,"column":1,"offset":143},"end":{"line":12,"column":22,"offset":379},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Growth and flexibility are what define this project that's why it contains different\npackages helping to shape the final product and make it handy to use\ndepending on your project requirements.","position":{"start":{"line":14,"column":1,"offset":383},"end":{"line":16,"column":40,"offset":578},"indent":[1,1]}}],"position":{"start":{"line":14,"column":1,"offset":383},"end":{"line":16,"column":40,"offset":578},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"DOM relations algorithm","position":{"start":{"line":18,"column":4,"offset":585},"end":{"line":18,"column":27,"offset":608},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":582},"end":{"line":18,"column":27,"offset":608},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"/dom-gen","children":[{"type":"text","value":"dflex/dom-gen","position":{"start":{"line":20,"column":2,"offset":613},"end":{"line":20,"column":15,"offset":626},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":612},"end":{"line":20,"column":26,"offset":637},"indent":[]}},{"type":"text","value":" Generates relations between DOM elements based on\nelement depth. For each DOM node, it generates three keys: Siblings, Parent and\nChildren keys and two\nindexes one refers to node order in its level and the other refers to the parent\nindex in parental level. Together: keys and indexes combined form of\nuniqueness for each element.","position":{"start":{"line":20,"column":26,"offset":637},"end":{"line":25,"column":29,"offset":973},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":20,"column":1,"offset":612},"end":{"line":25,"column":29,"offset":973},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"DOM traversal store","position":{"start":{"line":27,"column":4,"offset":980},"end":{"line":27,"column":23,"offset":999},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":977},"end":{"line":27,"column":23,"offset":999},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"DFlex store works on connecting all registered elements and organizes the\nrelations between them using the DOM relations generator algorithm. Allowing\neach element to be reached recursively using its id.","position":{"start":{"line":29,"column":1,"offset":1003},"end":{"line":31,"column":53,"offset":1208},"indent":[1,1]}}],"position":{"start":{"line":29,"column":1,"offset":1003},"end":{"line":31,"column":53,"offset":1208},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":34,"column":1,"offset":1212},"end":{"line":34,"column":31,"offset":1242},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":34,"column":31,"offset":1242}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Getting Started`}</h1>\n    <p><strong parentName=\"p\">{`DFlex`}</strong>{` is a JavaScript ambitious project to manipulate DOM Elements. It\noffers a solution to manipulate DOM elements with API easy to use\nand implement. It doesn't reinvent the wheel instead it was built upon\nwhat we already have.`}</p>\n    <p>{`Growth and flexibility are what define this project that's why it contains different\npackages helping to shape the final product and make it handy to use\ndepending on your project requirements.`}</p>\n    <h2>{`DOM relations algorithm`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/dom-gen\"\n      }}>{`dflex/dom-gen`}</a>{` Generates relations between DOM elements based on\nelement depth. For each DOM node, it generates three keys: Siblings, Parent and\nChildren keys and two\nindexes one refers to node order in its level and the other refers to the parent\nindex in parental level. Together: keys and indexes combined form of\nuniqueness for each element.`}</p>\n    <h2>{`DOM traversal store`}</h2>\n    <p>{`DFlex store works on connecting all registered elements and organizes the\nrelations between them using the DOM relations generator algorithm. Allowing\neach element to be reached recursively using its id.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}