{"expireTime":9007200845339240000,"key":"gatsby-plugin-mdx-entire-payload-e436a510ce2e2fac59941711ad06ad27-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":89,"offset":90},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":92},"end":{"line":5,"column":29,"offset":120},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"@dflex/store","position":{"start":{"line":7,"column":3,"offset":124},"end":{"line":7,"column":15,"offset":136},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":122},"end":{"line":7,"column":15,"offset":136},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The place where you traverse through the DOM tree using element-id.","position":{"start":{"line":9,"column":1,"offset":140},"end":{"line":9,"column":68,"offset":207},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":140},"end":{"line":9,"column":68,"offset":207},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"npm install @dflex/store","position":{"start":{"line":11,"column":1,"offset":211},"end":{"line":13,"column":4,"offset":249},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"DFlex store works on connecting all registered elements and organizes the\nrelations between them using the DOM relations generator algorithm. Allowing\neach element to be reached recursively using its id.","position":{"start":{"line":15,"column":1,"offset":253},"end":{"line":17,"column":53,"offset":458},"indent":[1,1]}}],"position":{"start":{"line":15,"column":1,"offset":253},"end":{"line":17,"column":53,"offset":458},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Why? To increase application performance if it relies heavily on the DOM nodes. To\nbe clear, this is not a case against HTML DOM API. Instead, this a way to\nenhance dealing with nodes more freely when you rely on existing store instead\nof letting the browser reads the nodes first, then you store them to do whatever\nyou want to do.","position":{"start":{"line":19,"column":1,"offset":462},"end":{"line":23,"column":16,"offset":798},"indent":[1,1,1,1]}}],"position":{"start":{"line":19,"column":1,"offset":462},"end":{"line":23,"column":16,"offset":798},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Giving this fact, the Dflex store is built on what you already have and you can\neasily access: ","position":{"start":{"line":25,"column":1,"offset":802},"end":{"line":26,"column":16,"offset":898},"indent":[1]}},{"type":"inlineCode","value":"id","position":{"start":{"line":26,"column":16,"offset":898},"end":{"line":26,"column":20,"offset":902},"indent":[]}},{"type":"text","value":", which is why ids are used as keys.","position":{"start":{"line":26,"column":20,"offset":902},"end":{"line":26,"column":56,"offset":938},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":802},"end":{"line":26,"column":56,"offset":938},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Registering elements in the store","position":{"start":{"line":28,"column":4,"offset":945},"end":{"line":28,"column":37,"offset":978},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":942},"end":{"line":28,"column":37,"offset":978},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"store.register(elmInstance: Object<elmInstance>)","position":{"start":{"line":30,"column":1,"offset":982},"end":{"line":32,"column":4,"offset":1042},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Where ","position":{"start":{"line":34,"column":1,"offset":1046},"end":{"line":34,"column":7,"offset":1052},"indent":[]}},{"type":"inlineCode","value":"elmInstance","position":{"start":{"line":34,"column":7,"offset":1052},"end":{"line":34,"column":20,"offset":1065},"indent":[]}},{"type":"text","value":" should include:","position":{"start":{"line":34,"column":20,"offset":1065},"end":{"line":34,"column":36,"offset":1081},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1046},"end":{"line":34,"column":36,"offset":1081},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"id: string","position":{"start":{"line":36,"column":3,"offset":1087},"end":{"line":36,"column":15,"offset":1099},"indent":[]}},{"type":"text","value":" - element id.","position":{"start":{"line":36,"column":15,"offset":1099},"end":{"line":36,"column":29,"offset":1113},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1087},"end":{"line":36,"column":29,"offset":1113},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1085},"end":{"line":36,"column":29,"offset":1113},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"depth: number","position":{"start":{"line":37,"column":3,"offset":1117},"end":{"line":37,"column":18,"offset":1132},"indent":[]}},{"type":"text","value":" - element depth in DOM tree.","position":{"start":{"line":37,"column":18,"offset":1132},"end":{"line":37,"column":47,"offset":1161},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1117},"end":{"line":37,"column":47,"offset":1161},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1115},"end":{"line":37,"column":47,"offset":1161},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"rest: any","position":{"start":{"line":38,"column":3,"offset":1165},"end":{"line":38,"column":14,"offset":1176},"indent":[]}},{"type":"text","value":" - another data you want to store it for each element.","position":{"start":{"line":38,"column":14,"offset":1176},"end":{"line":38,"column":68,"offset":1230},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1165},"end":{"line":38,"column":68,"offset":1230},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1163},"end":{"line":38,"column":68,"offset":1230},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1085},"end":{"line":38,"column":68,"offset":1230},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's create new store and register some elements in it:","position":{"start":{"line":40,"column":1,"offset":1234},"end":{"line":40,"column":57,"offset":1290},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1234},"end":{"line":40,"column":57,"offset":1290},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import Store from \"dflex/store\";\n\nconst store = new Store();\n\nconst elm0D0 = {\n  id: \"id-0\",\n  depth: 0,\n  moreInfo: \"I am the first child\",\n};\nstore.register(elm0D0);\n\nconst elm1D0 = {\n  id: \"id-1\",\n  depth: 0,\n  moreInfo: \"I am the second child\",\n};\nstore.register(elm1D0);\n\nconst elm0D1 = {\n  id: \"p-id-0\",\n  depth: 1,\n  moreInfo: \"I am the parent\",\n};\nstore.register(elm0D1);","position":{"start":{"line":42,"column":1,"offset":1294},"end":{"line":67,"column":4,"offset":1708},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting element in the store","position":{"start":{"line":69,"column":4,"offset":1715},"end":{"line":69,"column":32,"offset":1743},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1712},"end":{"line":69,"column":32,"offset":1743},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Element Instance by ID","position":{"start":{"line":71,"column":5,"offset":1751},"end":{"line":71,"column":27,"offset":1773},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1747},"end":{"line":71,"column":27,"offset":1773},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"store.getElmById(id: string) :  Object<elmInstanceMeta>","position":{"start":{"line":73,"column":1,"offset":1777},"end":{"line":75,"column":4,"offset":1844},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It returns ","position":{"start":{"line":77,"column":1,"offset":1848},"end":{"line":77,"column":12,"offset":1859},"indent":[]}},{"type":"inlineCode","value":"Object<elmInstanceMeta>","position":{"start":{"line":77,"column":12,"offset":1859},"end":{"line":77,"column":37,"offset":1884},"indent":[]}},{"type":"text","value":" which contains element metadata including\ngenerated keys and indexes with registered data.","position":{"start":{"line":77,"column":37,"offset":1884},"end":{"line":78,"column":49,"offset":1976},"indent":[1]}}],"position":{"start":{"line":77,"column":1,"offset":1848},"end":{"line":78,"column":49,"offset":1976},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"id: string","position":{"start":{"line":80,"column":3,"offset":1982},"end":{"line":80,"column":15,"offset":1994},"indent":[]}},{"type":"text","value":" - element id.","position":{"start":{"line":80,"column":15,"offset":1994},"end":{"line":80,"column":29,"offset":2008},"indent":[]}}],"position":{"start":{"line":80,"column":3,"offset":1982},"end":{"line":80,"column":29,"offset":2008},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":1980},"end":{"line":81,"column":1,"offset":2010},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"depth: number","position":{"start":{"line":82,"column":3,"offset":2014},"end":{"line":82,"column":18,"offset":2029},"indent":[]}},{"type":"text","value":" - element depth in DOM tree.","position":{"start":{"line":82,"column":18,"offset":2029},"end":{"line":82,"column":47,"offset":2058},"indent":[]}}],"position":{"start":{"line":82,"column":3,"offset":2014},"end":{"line":82,"column":47,"offset":2058},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2012},"end":{"line":83,"column":1,"offset":2060},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"order: Object <elementOrder>","position":{"start":{"line":84,"column":3,"offset":2064},"end":{"line":84,"column":33,"offset":2094},"indent":[]}}],"position":{"start":{"line":84,"column":3,"offset":2064},"end":{"line":84,"column":33,"offset":2094},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"self: number","position":{"start":{"line":86,"column":5,"offset":2102},"end":{"line":86,"column":19,"offset":2116},"indent":[]}},{"type":"text","value":" - Element self index among its siblings.","position":{"start":{"line":86,"column":19,"offset":2116},"end":{"line":86,"column":60,"offset":2157},"indent":[]}}],"position":{"start":{"line":86,"column":5,"offset":2102},"end":{"line":86,"column":60,"offset":2157},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":2100},"end":{"line":86,"column":60,"offset":2157},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"parent: number","position":{"start":{"line":87,"column":5,"offset":2163},"end":{"line":87,"column":21,"offset":2179},"indent":[]}},{"type":"text","value":" - Parent index among its siblings.","position":{"start":{"line":87,"column":21,"offset":2179},"end":{"line":87,"column":56,"offset":2214},"indent":[]}}],"position":{"start":{"line":87,"column":5,"offset":2163},"end":{"line":87,"column":56,"offset":2214},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":2161},"end":{"line":87,"column":56,"offset":2214},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":2100},"end":{"line":87,"column":56,"offset":2214},"indent":[3]}}],"position":{"start":{"line":84,"column":1,"offset":2062},"end":{"line":88,"column":1,"offset":2216},"indent":[1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"keys: Object <relationKey>","position":{"start":{"line":89,"column":3,"offset":2220},"end":{"line":89,"column":31,"offset":2248},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":2220},"end":{"line":89,"column":31,"offset":2248},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"sK: string","position":{"start":{"line":91,"column":5,"offset":2256},"end":{"line":91,"column":17,"offset":2268},"indent":[]}},{"type":"text","value":" - Siblings Key, connects nodes in the same level.","position":{"start":{"line":91,"column":17,"offset":2268},"end":{"line":91,"column":67,"offset":2318},"indent":[]}}],"position":{"start":{"line":91,"column":5,"offset":2256},"end":{"line":91,"column":67,"offset":2318},"indent":[]}}],"position":{"start":{"line":91,"column":3,"offset":2254},"end":{"line":91,"column":67,"offset":2318},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"pK: string","position":{"start":{"line":92,"column":5,"offset":2324},"end":{"line":92,"column":17,"offset":2336},"indent":[]}},{"type":"text","value":" - Parent key, connects nodes in the higher level.","position":{"start":{"line":92,"column":17,"offset":2336},"end":{"line":92,"column":67,"offset":2386},"indent":[]}}],"position":{"start":{"line":92,"column":5,"offset":2324},"end":{"line":92,"column":67,"offset":2386},"indent":[]}}],"position":{"start":{"line":92,"column":3,"offset":2322},"end":{"line":92,"column":67,"offset":2386},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"chK: string","position":{"start":{"line":93,"column":5,"offset":2392},"end":{"line":93,"column":18,"offset":2405},"indent":[]}},{"type":"text","value":" - Children Key, connects nodes in the lower level.","position":{"start":{"line":93,"column":18,"offset":2405},"end":{"line":93,"column":69,"offset":2456},"indent":[]}}],"position":{"start":{"line":93,"column":5,"offset":2392},"end":{"line":93,"column":69,"offset":2456},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":2390},"end":{"line":93,"column":69,"offset":2456},"indent":[]}}],"position":{"start":{"line":91,"column":3,"offset":2254},"end":{"line":93,"column":69,"offset":2456},"indent":[3,3]}}],"position":{"start":{"line":89,"column":1,"offset":2218},"end":{"line":94,"column":1,"offset":2458},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"rest: any","position":{"start":{"line":95,"column":3,"offset":2462},"end":{"line":95,"column":14,"offset":2473},"indent":[]}},{"type":"text","value":" - data already entered when element is registered.","position":{"start":{"line":95,"column":14,"offset":2473},"end":{"line":95,"column":65,"offset":2524},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":2462},"end":{"line":95,"column":65,"offset":2524},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2460},"end":{"line":95,"column":65,"offset":2524},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":1980},"end":{"line":95,"column":65,"offset":2524},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's apply it on element with ","position":{"start":{"line":97,"column":1,"offset":2528},"end":{"line":97,"column":32,"offset":2559},"indent":[]}},{"type":"inlineCode","value":"id= id-0","position":{"start":{"line":97,"column":32,"offset":2559},"end":{"line":97,"column":42,"offset":2569},"indent":[]}},{"type":"text","value":" which we already registered in the\nstore:","position":{"start":{"line":97,"column":42,"offset":2569},"end":{"line":98,"column":7,"offset":2612},"indent":[1]}}],"position":{"start":{"line":97,"column":1,"offset":2528},"end":{"line":98,"column":7,"offset":2612},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"const elemInstance = store.getElmById(\"id-0\");\n\n// elemInstance = {\n//   depth: 0,\n//   id: \"id-0\",\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   moreInfo: \"I am the first child\",\n//   order: {\n//     parent: 0,\n//     self: 0,\n//   },\n// };","position":{"start":{"line":100,"column":1,"offset":2616},"end":{"line":117,"column":4,"offset":2918},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Element Tree by ID","position":{"start":{"line":119,"column":5,"offset":2926},"end":{"line":119,"column":23,"offset":2944},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2922},"end":{"line":119,"column":23,"offset":2944},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"store.getElmTreeById(id: string) : Object<elmInstanceConnection>","position":{"start":{"line":121,"column":1,"offset":2948},"end":{"line":123,"column":4,"offset":3024},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It returns ","position":{"start":{"line":125,"column":1,"offset":3028},"end":{"line":125,"column":12,"offset":3039},"indent":[]}},{"type":"inlineCode","value":"Object<elmInstanceConnection>","position":{"start":{"line":125,"column":12,"offset":3039},"end":{"line":125,"column":43,"offset":3070},"indent":[]}},{"type":"text","value":" which contains element connections in DOM tree with\nregistered data. It includes:","position":{"start":{"line":125,"column":43,"offset":3070},"end":{"line":126,"column":30,"offset":3153},"indent":[1]}}],"position":{"start":{"line":125,"column":1,"offset":3028},"end":{"line":126,"column":30,"offset":3153},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"element: Object<elmInstanceMeta>","position":{"start":{"line":128,"column":3,"offset":3159},"end":{"line":128,"column":37,"offset":3193},"indent":[]}},{"type":"text","value":"- for targeted element.","position":{"start":{"line":128,"column":37,"offset":3193},"end":{"line":128,"column":60,"offset":3216},"indent":[]}}],"position":{"start":{"line":128,"column":3,"offset":3159},"end":{"line":128,"column":60,"offset":3216},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3157},"end":{"line":129,"column":1,"offset":3218},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"parent: Object<elmInstanceMeta>","position":{"start":{"line":130,"column":3,"offset":3222},"end":{"line":130,"column":36,"offset":3255},"indent":[]}},{"type":"text","value":"- for element's parent.","position":{"start":{"line":130,"column":36,"offset":3255},"end":{"line":130,"column":59,"offset":3278},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":3222},"end":{"line":130,"column":59,"offset":3278},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3220},"end":{"line":131,"column":1,"offset":3280},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"branches: Object<treeBranches>","position":{"start":{"line":132,"column":3,"offset":3284},"end":{"line":132,"column":35,"offset":3316},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":132,"column":35,"offset":3316},"end":{"line":132,"column":36,"offset":3317},"indent":[]}}],"position":{"start":{"line":132,"column":3,"offset":3284},"end":{"line":132,"column":36,"offset":3317},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"siblings: string<id>|Array<ids>","position":{"start":{"line":134,"column":5,"offset":3325},"end":{"line":134,"column":38,"offset":3358},"indent":[]}},{"type":"text","value":" - all element's siblings.","position":{"start":{"line":134,"column":38,"offset":3358},"end":{"line":134,"column":64,"offset":3384},"indent":[]}}],"position":{"start":{"line":134,"column":5,"offset":3325},"end":{"line":134,"column":64,"offset":3384},"indent":[]}}],"position":{"start":{"line":134,"column":3,"offset":3323},"end":{"line":135,"column":1,"offset":3386},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"parents: string<id>|Array<ids>","position":{"start":{"line":136,"column":5,"offset":3392},"end":{"line":136,"column":37,"offset":3424},"indent":[]}},{"type":"text","value":" - all element's parents.","position":{"start":{"line":136,"column":37,"offset":3424},"end":{"line":136,"column":62,"offset":3449},"indent":[]}}],"position":{"start":{"line":136,"column":5,"offset":3392},"end":{"line":136,"column":62,"offset":3449},"indent":[]}}],"position":{"start":{"line":136,"column":3,"offset":3390},"end":{"line":136,"column":62,"offset":3449},"indent":[]}}],"position":{"start":{"line":134,"column":3,"offset":3323},"end":{"line":136,"column":62,"offset":3449},"indent":[1,3]}}],"position":{"start":{"line":132,"column":1,"offset":3282},"end":{"line":136,"column":62,"offset":3449},"indent":[1,1,1,1]}}],"position":{"start":{"line":128,"column":1,"offset":3157},"end":{"line":136,"column":62,"offset":3449},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Going back to our first element with ","position":{"start":{"line":138,"column":1,"offset":3453},"end":{"line":138,"column":38,"offset":3490},"indent":[]}},{"type":"inlineCode","value":"id= id-0","position":{"start":{"line":138,"column":38,"offset":3490},"end":{"line":138,"column":48,"offset":3500},"indent":[]}},{"type":"text","value":", we can get element instance, its parent instance,\nand its connection branches as following:","position":{"start":{"line":138,"column":48,"offset":3500},"end":{"line":139,"column":42,"offset":3594},"indent":[1]}}],"position":{"start":{"line":138,"column":1,"offset":3453},"end":{"line":139,"column":42,"offset":3594},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"const elmInstanceConnection = store.getElmTreeById(\"id-0\");\n\n// elmInstanceConnection = {\n//   element: {\n//     id: \"id-0\",\n//     depth: 0,\n//     moreInfo: \"I am the first child\",\n//     order: { self: 0, parent: 0 },\n//     keys: { sK: \"0-0\", pK: \"1-0\", chK: null },\n//   },\n//   parent: {\n//     depth: 1,\n//     id: \"p-id-0\",\n//     keys: {\n//       chK: \"0-0\",\n//       pK: \"2-0\",\n//       sK: \"1-0\",\n//     },\n//     moreInfo: \"I am the parent\",\n//     order: {\n//       parent: 0,\n//       self: 0,\n//     },\n//   },\n//   branches: { siblings: [\"id-0\", \"id-1\"], parents: \"p-id-0\" },\n// };","position":{"start":{"line":141,"column":1,"offset":3598},"end":{"line":168,"column":4,"offset":4232},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Why this is matter? Because now you can traverse through DOM tree with existing\nstore. Note that ","position":{"start":{"line":170,"column":1,"offset":4236},"end":{"line":171,"column":18,"offset":4334},"indent":[1]}},{"type":"inlineCode","value":"elmInstanceConnection.branches.parents","position":{"start":{"line":171,"column":18,"offset":4334},"end":{"line":171,"column":58,"offset":4374},"indent":[]}},{"type":"text","value":" allows you to go up\nwhile ","position":{"start":{"line":171,"column":58,"offset":4374},"end":{"line":172,"column":7,"offset":4402},"indent":[1]}},{"type":"inlineCode","value":"elmInstanceConnection.branches.siblings","position":{"start":{"line":172,"column":7,"offset":4402},"end":{"line":172,"column":48,"offset":4443},"indent":[]}},{"type":"text","value":" allows you to traverse through all\nnode siblings. And not only that, both ways retrieve nodes in order.","position":{"start":{"line":172,"column":48,"offset":4443},"end":{"line":173,"column":69,"offset":4548},"indent":[1]}}],"position":{"start":{"line":170,"column":1,"offset":4236},"end":{"line":173,"column":69,"offset":4548},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test","position":{"start":{"line":175,"column":4,"offset":4555},"end":{"line":175,"column":8,"offset":4559},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":4552},"end":{"line":175,"column":8,"offset":4559},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"yarn test store","position":{"start":{"line":177,"column":1,"offset":4563},"end":{"line":179,"column":4,"offset":4590},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"License","position":{"start":{"line":181,"column":4,"offset":4597},"end":{"line":181,"column":11,"offset":4604},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":4594},"end":{"line":181,"column":11,"offset":4604},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This package is licensed under the ","position":{"start":{"line":183,"column":1,"offset":4608},"end":{"line":183,"column":36,"offset":4643},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/jalal246/dflex/tree/master/packages/store/LICENSE","children":[{"type":"text","value":"GPL-3.0 License","position":{"start":{"line":183,"column":37,"offset":4644},"end":{"line":183,"column":52,"offset":4659},"indent":[]}}],"position":{"start":{"line":183,"column":36,"offset":4643},"end":{"line":183,"column":123,"offset":4730},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":4608},"end":{"line":183,"column":123,"offset":4730},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":186,"column":1,"offset":4734},"end":{"line":186,"column":31,"offset":4764},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":186,"column":31,"offset":4764}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`@dflex/store`}</h1>\n    <p>{`The place where you traverse through the DOM tree using element-id.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @dflex/store\n`}</code></pre>\n    <p>{`DFlex store works on connecting all registered elements and organizes the\nrelations between them using the DOM relations generator algorithm. Allowing\neach element to be reached recursively using its id.`}</p>\n    <p>{`Why? To increase application performance if it relies heavily on the DOM nodes. To\nbe clear, this is not a case against HTML DOM API. Instead, this a way to\nenhance dealing with nodes more freely when you rely on existing store instead\nof letting the browser reads the nodes first, then you store them to do whatever\nyou want to do.`}</p>\n    <p>{`Giving this fact, the Dflex store is built on what you already have and you can\neasily access: `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`, which is why ids are used as keys.`}</p>\n    <h2>{`Registering elements in the store`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`store.register(elmInstance: Object<elmInstance>)\n`}</code></pre>\n    <p>{`Where `}<inlineCode parentName=\"p\">{`elmInstance`}</inlineCode>{` should include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id: string`}</inlineCode>{` - element id.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`depth: number`}</inlineCode>{` - element depth in DOM tree.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`rest: any`}</inlineCode>{` - another data you want to store it for each element.`}</li>\n    </ul>\n    <p>{`Let's create new store and register some elements in it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Store from \"dflex/store\";\n\nconst store = new Store();\n\nconst elm0D0 = {\n  id: \"id-0\",\n  depth: 0,\n  moreInfo: \"I am the first child\",\n};\nstore.register(elm0D0);\n\nconst elm1D0 = {\n  id: \"id-1\",\n  depth: 0,\n  moreInfo: \"I am the second child\",\n};\nstore.register(elm1D0);\n\nconst elm0D1 = {\n  id: \"p-id-0\",\n  depth: 1,\n  moreInfo: \"I am the parent\",\n};\nstore.register(elm0D1);\n`}</code></pre>\n    <h2>{`Getting element in the store`}</h2>\n    <h3>{`Element Instance by ID`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`store.getElmById(id: string) :  Object<elmInstanceMeta>\n`}</code></pre>\n    <p>{`It returns `}<inlineCode parentName=\"p\">{`Object<elmInstanceMeta>`}</inlineCode>{` which contains element metadata including\ngenerated keys and indexes with registered data.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`id: string`}</inlineCode>{` - element id.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`depth: number`}</inlineCode>{` - element depth in DOM tree.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`order: Object <elementOrder>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`self: number`}</inlineCode>{` - Element self index among its siblings.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`parent: number`}</inlineCode>{` - Parent index among its siblings.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`keys: Object <relationKey>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sK: string`}</inlineCode>{` - Siblings Key, connects nodes in the same level.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pK: string`}</inlineCode>{` - Parent key, connects nodes in the higher level.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`chK: string`}</inlineCode>{` - Children Key, connects nodes in the lower level.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`rest: any`}</inlineCode>{` - data already entered when element is registered.`}</p>\n      </li>\n    </ul>\n    <p>{`Let's apply it on element with `}<inlineCode parentName=\"p\">{`id= id-0`}</inlineCode>{` which we already registered in the\nstore:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const elemInstance = store.getElmById(\"id-0\");\n\n// elemInstance = {\n//   depth: 0,\n//   id: \"id-0\",\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   moreInfo: \"I am the first child\",\n//   order: {\n//     parent: 0,\n//     self: 0,\n//   },\n// };\n`}</code></pre>\n    <h3>{`Element Tree by ID`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`store.getElmTreeById(id: string) : Object<elmInstanceConnection>\n`}</code></pre>\n    <p>{`It returns `}<inlineCode parentName=\"p\">{`Object<elmInstanceConnection>`}</inlineCode>{` which contains element connections in DOM tree with\nregistered data. It includes:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`element: Object<elmInstanceMeta>`}</inlineCode>{`- for targeted element.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`parent: Object<elmInstanceMeta>`}</inlineCode>{`- for element's parent.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`branches: Object<treeBranches>`}</inlineCode>{`:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`siblings: string<id>|Array<ids>`}</inlineCode>{` - all element's siblings.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`parents: string<id>|Array<ids>`}</inlineCode>{` - all element's parents.`}</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Going back to our first element with `}<inlineCode parentName=\"p\">{`id= id-0`}</inlineCode>{`, we can get element instance, its parent instance,\nand its connection branches as following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const elmInstanceConnection = store.getElmTreeById(\"id-0\");\n\n// elmInstanceConnection = {\n//   element: {\n//     id: \"id-0\",\n//     depth: 0,\n//     moreInfo: \"I am the first child\",\n//     order: { self: 0, parent: 0 },\n//     keys: { sK: \"0-0\", pK: \"1-0\", chK: null },\n//   },\n//   parent: {\n//     depth: 1,\n//     id: \"p-id-0\",\n//     keys: {\n//       chK: \"0-0\",\n//       pK: \"2-0\",\n//       sK: \"1-0\",\n//     },\n//     moreInfo: \"I am the parent\",\n//     order: {\n//       parent: 0,\n//       self: 0,\n//     },\n//   },\n//   branches: { siblings: [\"id-0\", \"id-1\"], parents: \"p-id-0\" },\n// };\n`}</code></pre>\n    <p>{`Why this is matter? Because now you can traverse through DOM tree with existing\nstore. Note that `}<inlineCode parentName=\"p\">{`elmInstanceConnection.branches.parents`}</inlineCode>{` allows you to go up\nwhile `}<inlineCode parentName=\"p\">{`elmInstanceConnection.branches.siblings`}</inlineCode>{` allows you to traverse through all\nnode siblings. And not only that, both ways retrieve nodes in order.`}</p>\n    <h2>{`Test`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn test store\n`}</code></pre>\n    <h2>{`License`}</h2>\n    <p>{`This package is licensed under the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jalal246/dflex/tree/master/packages/store/LICENSE\"\n      }}>{`GPL-3.0 License`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}