{"expireTime":9007200845339656000,"key":"gatsby-plugin-mdx-entire-payload-db9c7c268c2dc488453f25cabaada196-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":89,"offset":90},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":92},"end":{"line":5,"column":29,"offset":120},"indent":[]}},{"type":"heading","depth":1,"children":[],"position":{"start":{"line":7,"column":1,"offset":122},"end":{"line":7,"column":2,"offset":123},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"DFlex","position":{"start":{"line":9,"column":3,"offset":129},"end":{"line":9,"column":8,"offset":134},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":127},"end":{"line":9,"column":10,"offset":136},"indent":[]}},{"type":"text","value":" is a JavaScript ambitious project to manipulate DOM Elements. It\noffers a solution to manipulate DOM elements with API easy to use\nand implement. It doesn't reinvent the wheel instead it was built upon\nwhat we already have.","position":{"start":{"line":9,"column":10,"offset":136},"end":{"line":12,"column":22,"offset":363},"indent":[1,1,1]}}],"position":{"start":{"line":9,"column":1,"offset":127},"end":{"line":12,"column":22,"offset":363},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Growth and flexibility are what define this project that's why it contains different\npackages helping to shape the final product and make it handy to use\ndepending on your project requirements.","position":{"start":{"line":14,"column":1,"offset":367},"end":{"line":16,"column":40,"offset":562},"indent":[1,1]}}],"position":{"start":{"line":14,"column":1,"offset":367},"end":{"line":16,"column":40,"offset":562},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Packages Include","position":{"start":{"line":18,"column":4,"offset":569},"end":{"line":18,"column":20,"offset":585},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":566},"end":{"line":18,"column":20,"offset":585},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"linkReference","identifier":"dom relations generator algorithm","label":"DOM relations generator algorithm","referenceType":"shortcut","children":[{"type":"text","value":"DOM relations generator algorithm","position":{"start":{"line":20,"column":7,"offset":595},"end":{"line":20,"column":40,"offset":628},"indent":[]}}],"position":{"start":{"line":20,"column":6,"offset":594},"end":{"line":20,"column":41,"offset":629},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":589},"end":{"line":20,"column":41,"offset":629},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Generates relations between DOM elements based on element depth. For each DOM\nnode, it generates three keys: Siblings, Parent and Children keys and two\nindexes one refers to node order in its level and the other refers to the parent\nindex in parental level. Together: keys and indexes combined form of\nuniqueness for each element.","position":{"start":{"line":22,"column":1,"offset":633},"end":{"line":26,"column":29,"offset":967},"indent":[1,1,1,1]}}],"position":{"start":{"line":22,"column":1,"offset":633},"end":{"line":26,"column":29,"offset":967},"indent":[1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"link","title":null,"url":"/store","children":[{"type":"text","value":"DOM traversal store","position":{"start":{"line":28,"column":7,"offset":977},"end":{"line":28,"column":26,"offset":996},"indent":[]}}],"position":{"start":{"line":28,"column":6,"offset":976},"end":{"line":28,"column":35,"offset":1005},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":971},"end":{"line":28,"column":35,"offset":1005},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"DFlex store works on connecting all registered elements and organizes the\nrelations between them using the DOM relations generator algorithm. Allowing\neach element to be reached recursively using its id.","position":{"start":{"line":30,"column":1,"offset":1009},"end":{"line":32,"column":53,"offset":1214},"indent":[1,1]}}],"position":{"start":{"line":30,"column":1,"offset":1009},"end":{"line":32,"column":53,"offset":1214},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":35,"column":1,"offset":1218},"end":{"line":35,"column":31,"offset":1248},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":35,"column":31,"offset":1248}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1></h1>\n    <p><strong parentName=\"p\">{`DFlex`}</strong>{` is a JavaScript ambitious project to manipulate DOM Elements. It\noffers a solution to manipulate DOM elements with API easy to use\nand implement. It doesn't reinvent the wheel instead it was built upon\nwhat we already have.`}</p>\n    <p>{`Growth and flexibility are what define this project that's why it contains different\npackages helping to shape the final product and make it handy to use\ndepending on your project requirements.`}</p>\n    <h2>{`Packages Include`}</h2>\n    <h4>{`[DOM relations generator algorithm]`}</h4>\n    <p>{`Generates relations between DOM elements based on element depth. For each DOM\nnode, it generates three keys: Siblings, Parent and Children keys and two\nindexes one refers to node order in its level and the other refers to the parent\nindex in parental level. Together: keys and indexes combined form of\nuniqueness for each element.`}</p>\n    <h4><a parentName=\"h4\" {...{\n        \"href\": \"/store\"\n      }}>{`DOM traversal store`}</a></h4>\n    <p>{`DFlex store works on connecting all registered elements and organizes the\nrelations between them using the DOM relations generator algorithm. Allowing\neach element to be reached recursively using its id.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}