{"expireTime":9007200845338553000,"key":"gatsby-plugin-mdx-entire-payload-3b4eb8a797c3ba0a7f29eab20c55dbf0-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":89,"offset":90},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":92},"end":{"line":5,"column":29,"offset":120},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"@dflex/dom-gen","position":{"start":{"line":7,"column":3,"offset":124},"end":{"line":7,"column":17,"offset":138},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":122},"end":{"line":7,"column":17,"offset":138},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"DOM relations generator algorithm.","position":{"start":{"line":9,"column":3,"offset":144},"end":{"line":9,"column":37,"offset":178},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":144},"end":{"line":9,"column":37,"offset":178},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":142},"end":{"line":9,"column":37,"offset":178},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"npm install @dflex/dom-gen","position":{"start":{"line":11,"column":1,"offset":182},"end":{"line":13,"column":4,"offset":222},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Generates relations between DOM elements based on element depth. For each DOM\nnode, it generates three keys: Siblings, Parent and Children keys and two\nindexes one refers to node order in its level and the other refers to the parent\nindex in parental level. Together: keys and indexes combined form of\nuniqueness for each element.","position":{"start":{"line":15,"column":1,"offset":226},"end":{"line":19,"column":29,"offset":560},"indent":[1,1,1,1]}}],"position":{"start":{"line":15,"column":1,"offset":226},"end":{"line":19,"column":29,"offset":560},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In case you are dealing with any DOM-tree, you can build entire branches and traverse\nthrough them using these generated unique keys and indexes. Think of relational\ndatabase or hash tables but applied in DOM tree.","position":{"start":{"line":21,"column":1,"offset":564},"end":{"line":23,"column":49,"offset":780},"indent":[1,1]}}],"position":{"start":{"line":21,"column":1,"offset":564},"end":{"line":23,"column":49,"offset":780},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Generates element pointer","position":{"start":{"line":25,"column":4,"offset":787},"end":{"line":25,"column":29,"offset":812},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":784},"end":{"line":25,"column":29,"offset":812},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Element pointer refers to the element position and its relationship in DOM tree.\nIt's represented with ","position":{"start":{"line":27,"column":1,"offset":816},"end":{"line":28,"column":23,"offset":920},"indent":[1]}},{"type":"inlineCode","value":"getElmPointer","position":{"start":{"line":28,"column":23,"offset":920},"end":{"line":28,"column":38,"offset":935},"indent":[]}},{"type":"text","value":" as following:","position":{"start":{"line":28,"column":38,"offset":935},"end":{"line":28,"column":52,"offset":949},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":816},"end":{"line":28,"column":52,"offset":949},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"const domGen = new Generator()\n\ndomGen.getElmPointer(id: string, depth: number)","position":{"start":{"line":30,"column":1,"offset":953},"end":{"line":34,"column":4,"offset":1046},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Returns pointer object refers to element relation with its keys and related\nindex:","position":{"start":{"line":36,"column":1,"offset":1050},"end":{"line":37,"column":7,"offset":1133},"indent":[1]}}],"position":{"start":{"line":36,"column":1,"offset":1050},"end":{"line":37,"column":7,"offset":1133},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"order: Object <elementOrder>","position":{"start":{"line":39,"column":3,"offset":1139},"end":{"line":39,"column":33,"offset":1169},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1139},"end":{"line":39,"column":33,"offset":1169},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"self: number","position":{"start":{"line":41,"column":5,"offset":1177},"end":{"line":41,"column":19,"offset":1191},"indent":[]}},{"type":"text","value":" - Element self index among its siblings.","position":{"start":{"line":41,"column":19,"offset":1191},"end":{"line":41,"column":60,"offset":1232},"indent":[]}}],"position":{"start":{"line":41,"column":5,"offset":1177},"end":{"line":41,"column":60,"offset":1232},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":1175},"end":{"line":41,"column":60,"offset":1232},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"parent: number","position":{"start":{"line":42,"column":5,"offset":1238},"end":{"line":42,"column":21,"offset":1254},"indent":[]}},{"type":"text","value":" - Parent index among its siblings.","position":{"start":{"line":42,"column":21,"offset":1254},"end":{"line":42,"column":56,"offset":1289},"indent":[]}}],"position":{"start":{"line":42,"column":5,"offset":1238},"end":{"line":42,"column":56,"offset":1289},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":1236},"end":{"line":42,"column":56,"offset":1289},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":1175},"end":{"line":42,"column":56,"offset":1289},"indent":[3]}}],"position":{"start":{"line":39,"column":1,"offset":1137},"end":{"line":43,"column":1,"offset":1291},"indent":[1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"keys: Object <relationKey>","position":{"start":{"line":44,"column":3,"offset":1295},"end":{"line":44,"column":31,"offset":1323},"indent":[]}}],"position":{"start":{"line":44,"column":3,"offset":1295},"end":{"line":44,"column":31,"offset":1323},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"sK: string","position":{"start":{"line":46,"column":5,"offset":1331},"end":{"line":46,"column":17,"offset":1343},"indent":[]}},{"type":"text","value":" - Siblings Key, connects nodes in the same level.","position":{"start":{"line":46,"column":17,"offset":1343},"end":{"line":46,"column":67,"offset":1393},"indent":[]}}],"position":{"start":{"line":46,"column":5,"offset":1331},"end":{"line":46,"column":67,"offset":1393},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":1329},"end":{"line":46,"column":67,"offset":1393},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"pK: string","position":{"start":{"line":47,"column":5,"offset":1399},"end":{"line":47,"column":17,"offset":1411},"indent":[]}},{"type":"text","value":" - Parent key, connects nodes in the higher level.","position":{"start":{"line":47,"column":17,"offset":1411},"end":{"line":47,"column":67,"offset":1461},"indent":[]}}],"position":{"start":{"line":47,"column":5,"offset":1399},"end":{"line":47,"column":67,"offset":1461},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":1397},"end":{"line":47,"column":67,"offset":1461},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"chK: string","position":{"start":{"line":48,"column":5,"offset":1467},"end":{"line":48,"column":18,"offset":1480},"indent":[]}},{"type":"text","value":" - Children Key, connects nodes in the lower level.","position":{"start":{"line":48,"column":18,"offset":1480},"end":{"line":48,"column":69,"offset":1531},"indent":[]}}],"position":{"start":{"line":48,"column":5,"offset":1467},"end":{"line":48,"column":69,"offset":1531},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":1465},"end":{"line":48,"column":69,"offset":1531},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":1329},"end":{"line":48,"column":69,"offset":1531},"indent":[3,3]}}],"position":{"start":{"line":44,"column":1,"offset":1293},"end":{"line":48,"column":69,"offset":1531},"indent":[1,1,1,1]}}],"position":{"start":{"line":39,"column":1,"offset":1137},"end":{"line":48,"column":69,"offset":1531},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"js","meta":null,"value":"import Generator from \"@dflex/dom-gen\"\n\nconst domGen = new Generator()\n\nlet pointer = domGen.getElmPointer(\"id-0\", 0)\n\n// pointer = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 0,\n//   },\n// };","position":{"start":{"line":50,"column":1,"offset":1535},"end":{"line":68,"column":4,"offset":1833},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Internally ","position":{"start":{"line":70,"column":1,"offset":1837},"end":{"line":70,"column":12,"offset":1848},"indent":[]}},{"type":"inlineCode","value":"Generator","position":{"start":{"line":70,"column":12,"offset":1848},"end":{"line":70,"column":23,"offset":1859},"indent":[]}},{"type":"text","value":" has build dom tree as following:","position":{"start":{"line":70,"column":23,"offset":1859},"end":{"line":70,"column":56,"offset":1892},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1837},"end":{"line":70,"column":56,"offset":1892},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"DOM-root\n│\n│───id-0 => order: { parent: 0, self: 0 } || keys: { chK: null , pK: \"1-0\", sK: \"0-0\" }","position":{"start":{"line":72,"column":1,"offset":1896},"end":{"line":76,"column":4,"offset":2010},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Adding more elements on the same level:","position":{"start":{"line":78,"column":1,"offset":2014},"end":{"line":78,"column":40,"offset":2053},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2014},"end":{"line":78,"column":40,"offset":2053},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const pointer1 = domGen.getElmPointer(\"id-1\", 0)\n\n// pointer1 = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 1,\n//   },\n// };\n\nconst pointer2 = domGen.getElmPointer(\"id-2\", 0)\n\n// pointer2 = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 2,\n//   },\n// };","position":{"start":{"line":80,"column":1,"offset":2057},"end":{"line":108,"column":4,"offset":2501},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And dom tree is:","position":{"start":{"line":110,"column":1,"offset":2505},"end":{"line":110,"column":17,"offset":2521},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":2505},"end":{"line":110,"column":17,"offset":2521},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"DOM-root\n│\n│───id-0 => order: {parent: 0, self: 0} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n│\n│───id-1 => order: {parent: 0, self: 1} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n│\n│───id-2 => order: {parent: 0, self: 2} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}","position":{"start":{"line":112,"column":1,"offset":2525},"end":{"line":120,"column":4,"offset":2808},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":122,"column":3,"offset":2814},"end":{"line":122,"column":8,"offset":2819},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2812},"end":{"line":122,"column":10,"offset":2821},"indent":[]}},{"type":"text","value":" ids form 0 to 2, all have same parent and siblings key. And it\nguarantees that any any incoming parent will carry key ","position":{"start":{"line":122,"column":10,"offset":2821},"end":{"line":123,"column":56,"offset":2941},"indent":[1]}},{"type":"inlineCode","value":"1-0","position":{"start":{"line":123,"column":56,"offset":2941},"end":{"line":123,"column":61,"offset":2946},"indent":[]}},{"type":"text","value":" and exists in\nposition ","position":{"start":{"line":123,"column":61,"offset":2946},"end":{"line":124,"column":10,"offset":2971},"indent":[1]}},{"type":"inlineCode","value":"0","position":{"start":{"line":124,"column":10,"offset":2971},"end":{"line":124,"column":13,"offset":2974},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":124,"column":13,"offset":2974},"end":{"line":124,"column":14,"offset":2975},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2812},"end":{"line":124,"column":14,"offset":2975},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This goes also for any parent. Eventually, by using keys and indexes you can go up↑\nand down↓.","position":{"start":{"line":126,"column":1,"offset":2979},"end":{"line":127,"column":11,"offset":3074},"indent":[1]}}],"position":{"start":{"line":126,"column":1,"offset":2979},"end":{"line":127,"column":11,"offset":3074},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Following the same logic we can go deeper:","position":{"start":{"line":129,"column":1,"offset":3078},"end":{"line":129,"column":43,"offset":3120},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3078},"end":{"line":129,"column":43,"offset":3120},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const pointer = domGen.getElmPointer(\"id-parent-1\", 1)\n\n// pointer = {\n//   keys: {\n//     chK: \"0-0\",\n//     pK: \"2-0\",\n//     sK: \"1-0\", // this key was generated previously in children level.\n//   },\n//   order: {\n//     parent: 0, // all children aware of their parent index.\n//     self: 0,\n//   },\n// };","position":{"start":{"line":131,"column":1,"offset":3124},"end":{"line":145,"column":4,"offset":3457},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Changing the depth identifies new level. Take a look at current dom tree that we\nnow have:","position":{"start":{"line":147,"column":1,"offset":3461},"end":{"line":148,"column":10,"offset":3552},"indent":[1]}}],"position":{"start":{"line":147,"column":1,"offset":3461},"end":{"line":148,"column":10,"offset":3552},"indent":[1]}},{"type":"code","lang":"bash","meta":null,"value":"DOM-root\n├───id-parent-1  => order: {parent: 0, self: 0} || keys: {chK: \"0-0\", pK: \"2-0\", sK: \"1-0\"}\n    |\n    │───id-0  => order: {parent: 0, self: 0} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n    │\n    │───id-1 => ..\n    │\n    │───id-2 => ..\n","position":{"start":{"line":150,"column":1,"offset":3556},"end":{"line":160,"column":4,"offset":3823},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Take into consideration some major points:","position":{"start":{"line":162,"column":3,"offset":3829},"end":{"line":162,"column":45,"offset":3871},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":3827},"end":{"line":162,"column":47,"offset":3873},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":3827},"end":{"line":162,"column":47,"offset":3873},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It works both ascending and descending. So, it doesn't care how nodes are\nmounted and it works with async mounting.","position":{"start":{"line":164,"column":3,"offset":3879},"end":{"line":165,"column":44,"offset":3997},"indent":[3]}}],"position":{"start":{"line":164,"column":3,"offset":3879},"end":{"line":165,"column":44,"offset":3997},"indent":[3]}}],"position":{"start":{"line":164,"column":1,"offset":3877},"end":{"line":166,"column":1,"offset":3999},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It automatically attaches the tree and links each node to the suitable parent\nand siblings.","position":{"start":{"line":167,"column":3,"offset":4003},"end":{"line":168,"column":16,"offset":4097},"indent":[3]}}],"position":{"start":{"line":167,"column":3,"offset":4003},"end":{"line":168,"column":16,"offset":4097},"indent":[3]}}],"position":{"start":{"line":167,"column":1,"offset":4001},"end":{"line":168,"column":16,"offset":4097},"indent":[1]}}],"position":{"start":{"line":164,"column":1,"offset":3877},"end":{"line":168,"column":16,"offset":4097},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Dealing with branches","position":{"start":{"line":170,"column":4,"offset":4104},"end":{"line":170,"column":25,"offset":4125},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":4101},"end":{"line":170,"column":25,"offset":4125},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Despite the fact that ","position":{"start":{"line":172,"column":1,"offset":4129},"end":{"line":172,"column":23,"offset":4151},"indent":[]}},{"type":"inlineCode","value":"Generator","position":{"start":{"line":172,"column":23,"offset":4151},"end":{"line":172,"column":34,"offset":4162},"indent":[]}},{"type":"text","value":" is not DOM store, it maintains some kind of\ndata to keep generate unique pointers. Every incoming node element belong to\nbranch contains all input ids distrusted by depth/level entries.","position":{"start":{"line":172,"column":34,"offset":4162},"end":{"line":174,"column":65,"offset":4350},"indent":[1,1]}}],"position":{"start":{"line":172,"column":1,"offset":4129},"end":{"line":174,"column":65,"offset":4350},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Getting branches","position":{"start":{"line":176,"column":5,"offset":4358},"end":{"line":176,"column":21,"offset":4374},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":4354},"end":{"line":176,"column":21,"offset":4374},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"domGen.getElmBranch(sk: string) : string<id> | Array<ids>","position":{"start":{"line":178,"column":1,"offset":4378},"end":{"line":180,"column":4,"offset":4447},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"where ","position":{"start":{"line":182,"column":1,"offset":4451},"end":{"line":182,"column":7,"offset":4457},"indent":[]}},{"type":"inlineCode","value":"sk","position":{"start":{"line":182,"column":7,"offset":4457},"end":{"line":182,"column":11,"offset":4461},"indent":[]}},{"type":"text","value":" represents siblings key generated by ","position":{"start":{"line":182,"column":11,"offset":4461},"end":{"line":182,"column":49,"offset":4499},"indent":[]}},{"type":"inlineCode","value":"getElmPointer","position":{"start":{"line":182,"column":49,"offset":4499},"end":{"line":182,"column":64,"offset":4514},"indent":[]}},{"type":"text","value":". Going back to\nour generated tree:","position":{"start":{"line":182,"column":64,"offset":4514},"end":{"line":183,"column":20,"offset":4550},"indent":[1]}}],"position":{"start":{"line":182,"column":1,"offset":4451},"end":{"line":183,"column":20,"offset":4550},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"const branchChildren = domGen.getElmBranch(\"0-0\")\n\n// branchChildren = [\"id-0\", \"id-1\", \"id-2\"];","position":{"start":{"line":185,"column":1,"offset":4554},"end":{"line":189,"column":4,"offset":4664},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Since we have only one parent ","position":{"start":{"line":191,"column":1,"offset":4668},"end":{"line":191,"column":31,"offset":4698},"indent":[]}},{"type":"inlineCode","value":"branchParents","position":{"start":{"line":191,"column":31,"offset":4698},"end":{"line":191,"column":46,"offset":4713},"indent":[]}},{"type":"text","value":" contain one node only:","position":{"start":{"line":191,"column":46,"offset":4713},"end":{"line":191,"column":69,"offset":4736},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":4668},"end":{"line":191,"column":69,"offset":4736},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const branchParents = domGen.getElmBranch(\"1-0\")\n\n// branchParents = \"id-parent-1\";","position":{"start":{"line":193,"column":1,"offset":4740},"end":{"line":197,"column":4,"offset":4837},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To get all branches:","position":{"start":{"line":199,"column":1,"offset":4841},"end":{"line":199,"column":21,"offset":4861},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":4841},"end":{"line":199,"column":21,"offset":4861},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const { branches } = domGen\n\n// branches = {\n//   \"0-0\": [\"id-0\", \"id-1\", \"id-2\"],\n//   \"1-0\": \"id-parent-1\",\n// };","position":{"start":{"line":201,"column":1,"offset":4865},"end":{"line":208,"column":4,"offset":4997},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Updating branches","position":{"start":{"line":210,"column":5,"offset":5005},"end":{"line":210,"column":22,"offset":5022},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":5001},"end":{"line":210,"column":22,"offset":5022},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There's no point in having DOM treemap without the ability to update it\naccording to some logic you've already implemented in your app. Following common\nsense, you can do it easily with ","position":{"start":{"line":212,"column":1,"offset":5026},"end":{"line":214,"column":34,"offset":5214},"indent":[1,1]}},{"type":"inlineCode","value":"setElmBranch","position":{"start":{"line":214,"column":34,"offset":5214},"end":{"line":214,"column":48,"offset":5228},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":214,"column":48,"offset":5228},"end":{"line":214,"column":49,"offset":5229},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":5026},"end":{"line":214,"column":49,"offset":5229},"indent":[1,1]}},{"type":"code","lang":"ts","meta":null,"value":"domGen.setElmBranch(sk: string, branch: string<id>|Array<ids>)","position":{"start":{"line":216,"column":1,"offset":5233},"end":{"line":218,"column":4,"offset":5307},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's continue working on our branches by switching the order of children.\nCurrently, we have: ","position":{"start":{"line":220,"column":1,"offset":5311},"end":{"line":221,"column":21,"offset":5407},"indent":[1]}},{"type":"inlineCode","value":"\"0-0\": [\"id-0\", \"id-1\", \"id-2\"]","position":{"start":{"line":221,"column":21,"offset":5407},"end":{"line":221,"column":54,"offset":5440},"indent":[]}},{"type":"text","value":" but element with ","position":{"start":{"line":221,"column":54,"offset":5440},"end":{"line":221,"column":72,"offset":5458},"indent":[]}},{"type":"inlineCode","value":"id-1","position":{"start":{"line":221,"column":72,"offset":5458},"end":{"line":221,"column":78,"offset":5464},"indent":[]}},{"type":"text","value":"\nhas been switched with ","position":{"start":{"line":221,"column":78,"offset":5464},"end":{"line":222,"column":24,"offset":5489},"indent":[1]}},{"type":"inlineCode","value":"id-2","position":{"start":{"line":222,"column":24,"offset":5489},"end":{"line":222,"column":30,"offset":5495},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":222,"column":30,"offset":5495},"end":{"line":222,"column":31,"offset":5496},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":5311},"end":{"line":222,"column":31,"offset":5496},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"const { branches } = domGen\n\nconst newBranch = [\"id-0\", \"id-2\", \"id-1\"]\n\ndomGen.setElmBranch(\"0-0\", newBranch)\n\n// branches = {\n//   \"0-0\": [\"id-0\", \"id-2\", \"id-1\"],\n//   \"1-0\": \"id-parent-1\",\n// };","position":{"start":{"line":224,"column":1,"offset":5500},"end":{"line":235,"column":4,"offset":5719},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test","position":{"start":{"line":237,"column":4,"offset":5726},"end":{"line":237,"column":8,"offset":5730},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":5723},"end":{"line":237,"column":8,"offset":5730},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"yarn test dom-gen","position":{"start":{"line":239,"column":1,"offset":5734},"end":{"line":241,"column":4,"offset":5763},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"License","position":{"start":{"line":243,"column":4,"offset":5770},"end":{"line":243,"column":11,"offset":5777},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":5767},"end":{"line":243,"column":11,"offset":5777},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This package is licensed under the ","position":{"start":{"line":245,"column":1,"offset":5781},"end":{"line":245,"column":36,"offset":5816},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/jalal246/dflex/tree/master/packages/dom-gen/LICENSE","children":[{"type":"text","value":"GPL-3.0 License","position":{"start":{"line":245,"column":37,"offset":5817},"end":{"line":245,"column":52,"offset":5832},"indent":[]}}],"position":{"start":{"line":245,"column":36,"offset":5816},"end":{"line":245,"column":125,"offset":5905},"indent":[]}}],"position":{"start":{"line":245,"column":1,"offset":5781},"end":{"line":245,"column":125,"offset":5905},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":248,"column":1,"offset":5909},"end":{"line":248,"column":31,"offset":5939},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":248,"column":31,"offset":5939}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`@dflex/dom-gen`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`DOM relations generator algorithm.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @dflex/dom-gen\n`}</code></pre>\n    <p>{`Generates relations between DOM elements based on element depth. For each DOM\nnode, it generates three keys: Siblings, Parent and Children keys and two\nindexes one refers to node order in its level and the other refers to the parent\nindex in parental level. Together: keys and indexes combined form of\nuniqueness for each element.`}</p>\n    <p>{`In case you are dealing with any DOM-tree, you can build entire branches and traverse\nthrough them using these generated unique keys and indexes. Think of relational\ndatabase or hash tables but applied in DOM tree.`}</p>\n    <h2>{`Generates element pointer`}</h2>\n    <p>{`Element pointer refers to the element position and its relationship in DOM tree.\nIt's represented with `}<inlineCode parentName=\"p\">{`getElmPointer`}</inlineCode>{` as following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const domGen = new Generator()\n\ndomGen.getElmPointer(id: string, depth: number)\n`}</code></pre>\n    <p>{`Returns pointer object refers to element relation with its keys and related\nindex:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`order: Object <elementOrder>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`self: number`}</inlineCode>{` - Element self index among its siblings.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`parent: number`}</inlineCode>{` - Parent index among its siblings.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`keys: Object <relationKey>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sK: string`}</inlineCode>{` - Siblings Key, connects nodes in the same level.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pK: string`}</inlineCode>{` - Parent key, connects nodes in the higher level.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`chK: string`}</inlineCode>{` - Children Key, connects nodes in the lower level.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Generator from \"@dflex/dom-gen\"\n\nconst domGen = new Generator()\n\nlet pointer = domGen.getElmPointer(\"id-0\", 0)\n\n// pointer = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 0,\n//   },\n// };\n`}</code></pre>\n    <p>{`Internally `}<inlineCode parentName=\"p\">{`Generator`}</inlineCode>{` has build dom tree as following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`DOM-root\n│\n│───id-0 => order: { parent: 0, self: 0 } || keys: { chK: null , pK: \"1-0\", sK: \"0-0\" }\n`}</code></pre>\n    <p>{`Adding more elements on the same level:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const pointer1 = domGen.getElmPointer(\"id-1\", 0)\n\n// pointer1 = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 1,\n//   },\n// };\n\nconst pointer2 = domGen.getElmPointer(\"id-2\", 0)\n\n// pointer2 = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 2,\n//   },\n// };\n`}</code></pre>\n    <p>{`And dom tree is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`DOM-root\n│\n│───id-0 => order: {parent: 0, self: 0} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n│\n│───id-1 => order: {parent: 0, self: 1} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n│\n│───id-2 => order: {parent: 0, self: 2} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` ids form 0 to 2, all have same parent and siblings key. And it\nguarantees that any any incoming parent will carry key `}<inlineCode parentName=\"p\">{`1-0`}</inlineCode>{` and exists in\nposition `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`.`}</p>\n    <p>{`This goes also for any parent. Eventually, by using keys and indexes you can go up↑\nand down↓.`}</p>\n    <p>{`Following the same logic we can go deeper:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const pointer = domGen.getElmPointer(\"id-parent-1\", 1)\n\n// pointer = {\n//   keys: {\n//     chK: \"0-0\",\n//     pK: \"2-0\",\n//     sK: \"1-0\", // this key was generated previously in children level.\n//   },\n//   order: {\n//     parent: 0, // all children aware of their parent index.\n//     self: 0,\n//   },\n// };\n`}</code></pre>\n    <p>{`Changing the depth identifies new level. Take a look at current dom tree that we\nnow have:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`DOM-root\n├───id-parent-1  => order: {parent: 0, self: 0} || keys: {chK: \"0-0\", pK: \"2-0\", sK: \"1-0\"}\n    |\n    │───id-0  => order: {parent: 0, self: 0} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n    │\n    │───id-1 => ..\n    │\n    │───id-2 => ..\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Take into consideration some major points:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It works both ascending and descending. So, it doesn't care how nodes are\nmounted and it works with async mounting.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It automatically attaches the tree and links each node to the suitable parent\nand siblings.`}</p>\n      </li>\n    </ul>\n    <h2>{`Dealing with branches`}</h2>\n    <p>{`Despite the fact that `}<inlineCode parentName=\"p\">{`Generator`}</inlineCode>{` is not DOM store, it maintains some kind of\ndata to keep generate unique pointers. Every incoming node element belong to\nbranch contains all input ids distrusted by depth/level entries.`}</p>\n    <h3>{`Getting branches`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`domGen.getElmBranch(sk: string) : string<id> | Array<ids>\n`}</code></pre>\n    <p>{`where `}<inlineCode parentName=\"p\">{`sk`}</inlineCode>{` represents siblings key generated by `}<inlineCode parentName=\"p\">{`getElmPointer`}</inlineCode>{`. Going back to\nour generated tree:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const branchChildren = domGen.getElmBranch(\"0-0\")\n\n// branchChildren = [\"id-0\", \"id-1\", \"id-2\"];\n`}</code></pre>\n    <p>{`Since we have only one parent `}<inlineCode parentName=\"p\">{`branchParents`}</inlineCode>{` contain one node only:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const branchParents = domGen.getElmBranch(\"1-0\")\n\n// branchParents = \"id-parent-1\";\n`}</code></pre>\n    <p>{`To get all branches:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { branches } = domGen\n\n// branches = {\n//   \"0-0\": [\"id-0\", \"id-1\", \"id-2\"],\n//   \"1-0\": \"id-parent-1\",\n// };\n`}</code></pre>\n    <h3>{`Updating branches`}</h3>\n    <p>{`There's no point in having DOM treemap without the ability to update it\naccording to some logic you've already implemented in your app. Following common\nsense, you can do it easily with `}<inlineCode parentName=\"p\">{`setElmBranch`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`domGen.setElmBranch(sk: string, branch: string<id>|Array<ids>)\n`}</code></pre>\n    <p>{`Let's continue working on our branches by switching the order of children.\nCurrently, we have: `}<inlineCode parentName=\"p\">{`\"0-0\": [\"id-0\", \"id-1\", \"id-2\"]`}</inlineCode>{` but element with `}<inlineCode parentName=\"p\">{`id-1`}</inlineCode>{`\nhas been switched with `}<inlineCode parentName=\"p\">{`id-2`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { branches } = domGen\n\nconst newBranch = [\"id-0\", \"id-2\", \"id-1\"]\n\ndomGen.setElmBranch(\"0-0\", newBranch)\n\n// branches = {\n//   \"0-0\": [\"id-0\", \"id-2\", \"id-1\"],\n//   \"1-0\": \"id-parent-1\",\n// };\n`}</code></pre>\n    <h2>{`Test`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn test dom-gen\n`}</code></pre>\n    <h2>{`License`}</h2>\n    <p>{`This package is licensed under the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jalal246/dflex/tree/master/packages/dom-gen/LICENSE\"\n      }}>{`GPL-3.0 License`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}